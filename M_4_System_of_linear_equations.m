%% System of linear equations
% Solve the following A*x = b system of equations:
% ?2x1 ? x2 + 4x3 = 3
% 2x1 + 3x2 ? x3 = 1
% ?4x1 ? 10x2 ? 5x3 = ?12
A = [-2,-1,4;2,3,-1;-4,-10,-5];
b = [3;1;-12];

x = A\b
%% Calculate the LU-decomposition of the A matrix, 
% based on the Gaussian elimination done in the previous step!

L = [1,0,0;-1,1,0;2,-4,1];
U = [-2,-1,4;0,2,3;0,0,-1];
L*U % should be equal to A
A == L*U


%% Another example
A = [-2,2,1;6,-3,-4;-4,1,1];
b = [0,-8,4]';
x = A\b;
%%
L = [1,0,0;-3,1,0;2,-1,1]
U = [-2,2,1;0,3,-1;0,0,-2]
L*U


%% Usage of lu() built-in Matlab function

help lu
[L1,U]=lu(A); % L1 = P'*L
[L,U,P]=lu(A);

%% Try it and compare the result to the previous example solution!
A = [-2,-1,4;2,3,-1;-4,-10,-5];
b = [3;1;-12];

[L,U,P] = lu(A)



%% Solve the sle with the LU-decomposition!

A = [-3,1,0;12,-6,2;-6,4,1];
%[L,U] = lu(A)
L = [1,0,0;-4,1,0;2,-1,1];
U = [-3,1,0;0,-2,2;0,0,3];
L*U

% use the two different right side vectors
b = [5;-28;12];
c = [-6;18;-15];
U\[L\b] == A\b
U\[L\c] == A\c

%% Number of solutions of the SLE
% Cases: no solution, 1 solution or infinitly many solutions

A=[-2 -1 4; 2 3 -1; -4 -10 -5];
b=[3; 1; -12];

x=A\b
% The backslash operator gives 1 solution in ANY case!
% It does not indicate how many there are.

%% To get the number of solutions, look at the end result of the Gaussian elimination.
% rref() function gives as output the eliminated input matrix
rref([A b])
% The column vectors of A are linear independent, so 1 solution

%% Solve the SLE
A=[-4 -4 2; -2 -7 3; 2 12 -5];
b=[-2; 6; -13];
x=A\b
%%
% The matrix is singular, because its determinant is 0
det(A) 
%% Use the rref function to check the result
r = rref([A b])
% At the end of the elimination the column vectors of the matrix A are
% linear dependent of  each other, but this could indicate either no
% solution or infinately many solutions.
% However, the last column, representing the right hand side vector after
% elimination, is in the space defined by the column vectors, so the SLE
% has a paramterized solution, meaning infinately many solutions.
%%
% one of the solutions can be generated by the null() function
% Output is an orthonormal basis for the null space of the A input.
p=null(A,'r') % r means rational form
lambda = 1; % arbitrary value for the parametrization
% Parametrized solution of the SLE
x = r(:,end) + lambda *p

%% Solve the SLE 
A = [1,1;1,2;1,3;1,4]
b = [4;6;9;12]
%%
x = A\b
% Is this a solution? Check!
%%
rref([A,b])
% The extended matrix after elimination has a contradiction in it,
% so it has no solutions
% the backslash operator gives a solution, but this is just
% an approximation of it, based on the least squares method.
%%
format rat
0.25
%%
format
0.25
%% Solve the SLE with two different right-side vectors!
% Ax = b and Ax = c
A=[-2 -1 4; 2 3 -1; -4 -10 -5];
b=[3; 1; -12]; 
c=[17; 1; -42];
% If the matrix is the same, we can solve both at once with the backslash.
x=A\[b,c]
%% Test the computation time on larger matrices.
A=rand(10000);
b=ones(10000,1);
c=zeros(10000,1);
tic;x=A\[b,c];toc

tic;x=A\b; x2=A\c; toc

%% LU-decomposition
help lu
[L1,U]=lu(A); % L1 = P'*L
[L,U,P]=lu(A);
%%
x=U\(L1\b);
 
%% Solve the SLE with multiple vectors, with LU-decomposition
% The LU-decomposition does the elimination process of the matrix only once
% so with every vector it is fast to compute the solution.


A=rand(10000);
b=ones(10000,1);
c=zeros(10000,1);
d=rand(10000,1);
e=rand(10000,1);

tic;x=A\b;x=A\c;x=A\d;x=A\e;toc

tic;[L,U]=lu(A);  x=U\(L\b); x=U\(L\c);  x=U\(L\d);  x=U\(L\e);toc
 
%%
% Cholesky
chol(A)
chol(A,'lower')